--- check_unifi	2018-07-30 14:46:30.500000000 -0500
+++ check_unifi.new	2018-07-30 14:50:58.960000000 -0500
@@ -9,7 +9,7 @@
 
 import argparse
 import sys
-from unifi.controller import Controller
+from pyunifi.controller import Controller
 
 """Nagios plugin to check the UniFi Controller for AP status."""
 
@@ -50,20 +50,24 @@
     '-s', '--siteid', default='default',
     help='the site ID, UniFi >=3.x only (default "default")')
 parser.add_argument(
-    '-w', '--warning', default='',
+    '-w', '--warning', type=int,
     help='amount of APs to be down for WARNING (default: none)')
 parser.add_argument(
-    '-c', '--critical', default='',
+    '-c', '--critical', type=int,
     help='amount of APs to be down for CRITICAL (default: none)')
 parser.add_argument(
     '-a', '--ap', default='',
     help='name of AP to get status of (default: overall check)')
+parser.add_argument(
+    '-S', '--no_ssl_verify', default=True,
+    action='store_false', dest='ssl_verify',
+    help='whether to verify SSL cert (default: true)')
 args = parser.parse_args()
 
 # Connect to the AP (if we can)
 try:
     c = Controller(args.hostname, args.username, args.password,
-                   args.port, args.version, args.siteid)
+                   args.port, args.version, args.siteid, args.ssl_verify)
 except Exception as e:
     print ("UNKNOWN: Error connecting to UniFi Controller (%s)|"
            "Online=0 Offline=0" % e)
@@ -119,10 +123,10 @@
                % (ap_offline, offline_list, ap_online))
     message_code = OK
 
-    if args.critical != '':
+    if args.critical is not None:
         if ap_offline >= args.critical:
             message_code = CRITICAL
-    if message_code == OK and args.warning != '':
+    if message_code == OK and args.warning is not None:
         if ap_offline >= args.warning:
             message_code = WARNING
 
